{"version":3,"sources":["slideshow.js","App.js","reportWebVitals.js","index.js"],"names":["colors","Slideshow","React","useState","index","setIndex","timeoutRef","useRef","resetTimeout","current","clearTimeout","useEffect","setTimeout","prevIndex","length","className","style","transform","map","backgroundColor","_","idx","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGMA,EAAS,CAAC,UAAW,UAAW,UAAU,WAGjC,SAASC,IACpB,MAA0BC,IAAMC,SAAS,GAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAaJ,IAAMK,OAAO,MAEhC,SAASC,IACDF,EAAWG,SACbC,aAAaJ,EAAWG,SAiB9B,OAbAP,IAAMS,WAAU,WASZ,OARAH,IACAF,EAAWG,QAASG,YAChB,kBACIP,GAAS,SAACQ,GAAD,OACLA,IAAcb,EAAOc,OAAS,EAAI,EAAID,EAAY,OAhBxD,MAoBC,WACHL,OAEL,CAACJ,IAEA,gCACI,qBAAKW,UAAU,YAAf,SACI,qBAAKA,UAAU,kBAAkBC,MAAO,CAAEC,UAAU,eAAD,OAA0B,KAARb,EAAlB,aAAnD,SACKJ,EAAOkB,KAAI,SAACC,EAAiBf,GAAlB,OACR,qBAAKW,UAAU,QAAoBC,MAAO,CAAEG,oBAAhBf,UAIxC,qBAAKW,UAAU,gBAAf,SACKf,EAAOkB,KAAI,SAACE,EAAGC,GAAJ,OACR,qBAAeN,UAAS,sBAAiBX,IAAUiB,EAAM,UAAY,IACjEC,QAAS,WACLjB,EAASgB,KAFPA,WC9BfE,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAACd,EAAD,OCOSuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2c1feaa8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css';\r\n\r\nconst colors = [\"#0088FE\", \"#00C49F\", \"#FFBB28\",\"#c4c4c4\"];\r\n\r\nconst delay = 2500;\r\nexport default function Slideshow() {\r\n    const [index, setIndex] = React.useState(0);\r\n    const timeoutRef = React.useRef(null);\r\n\r\n    function resetTimeout() {\r\n        if (timeoutRef.current) {\r\n          clearTimeout(timeoutRef.current);\r\n        }\r\n      }\r\n\r\n    React.useEffect(() => {\r\n        resetTimeout();\r\n        timeoutRef.current= setTimeout(\r\n            () =>\r\n                setIndex((prevIndex) =>\r\n                    prevIndex === colors.length - 1 ? 0 : prevIndex + 1\r\n                ),\r\n            delay\r\n        );\r\n        return () => { \r\n            resetTimeout();\r\n        };\r\n    }, [index]);\r\n    return (\r\n        <div>\r\n            <div className=\"slideshow\">\r\n                <div className=\"slideshowSlider\" style={{ transform: `translate3d(${-index * 100}%, 0, 0)` }}>\r\n                    {colors.map((backgroundColor, index) => (\r\n                        <div className=\"slide\" key={index} style={{ backgroundColor }} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className=\"slideshowDots\">\r\n                {colors.map((_, idx) => (\r\n                    <div key={idx} className={`slideshowDot${index === idx ? \" active\" : \"\"}`}\r\n                        onClick={() => {\r\n                            setIndex(idx);\r\n                        }}></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './App.css';\nimport Slideshow from './slideshow';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Slideshow/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}